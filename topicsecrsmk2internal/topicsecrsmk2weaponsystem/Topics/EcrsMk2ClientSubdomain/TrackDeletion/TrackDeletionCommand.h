#ifndef TRACK_DELETION_COMMAND
#define TRACK_DELETION_COMMAND

#include "Fabric/Utils/LCA_Macros.h"

namespace Topics {
    namespace TrackDeletion {
        /**
         * @brief 
         * ALL = Delete all Radar Tracks (except those with a WS-Commanded Tracking Task applied) and all
         * ALL-AIR = Delete Air tracks (except those with a WS-Commanded Tracking Task applied) and all 'Tentative' Air Tracks.
         * ALL-SURFACE = Delete Surface tracks (except those with a WS-Commanded Tracking Task applied) and all 'Tentative' Surface Tracks.
         * INDIVIDUAL = Track to be deleted is identified by RDRC-F-DEL-TRK-IDENT
         */
        enum class RDRC_F_DEL_TRACKS_ENUM : uint8_t {
            NO_ACTION = 0x00,
            ALL = 0x01,
            ALL_AIR = 0x02,
            ALL_SURFACE = 0x03,
            INDIVIDUAL = 0x04
        };
        /**
         * @brief class to encapsulate the deletion of a track command from the functional parameters
         */
        class TrackDeletionCommand{
            public:
                /**
                 * @brief Constructor for the Track Deletion Command
                 * @param deleteTracksIn : description of the tracks to be deleted
                 * @param trackIdIn : the individual track ID to be deleted, can be omitted if deleteTracksIn is set to anything but INDIVIDUAL in which case a default of 0 will be used
                 */
                TrackDeletionCommand(RDRC_F_DEL_TRACKS_ENUM deleteTracksIn = RDRC_F_DEL_TRACKS_ENUM::NO_ACTION, uint16_t trackIdIn = 0) : 
                    RDRC_F_DEL_TRACKS{deleteTracksIn},
                    RDRC_F_DEL_TRK_IDENT{trackIdIn}
                {
                }
                /**
                 * @brief getter for the RDRC_F_DEL_TRACKS functional parameter
                 * @returns the track track deletion command type
                 */
                const RDRC_F_DEL_TRACKS_ENUM getTrackDeletionAction() const noexcept
                {
                    return RDRC_F_DEL_TRACKS;
                }
                /**
                 * @brief getter for the RDRC_F_DEL_TRK_IDENT functional parameter
                 * @returns the track Id to delete
                 */
                const uint16_t getDeleteTrackId() const noexcept
                {
                    return RDRC_F_DEL_TRK_IDENT;
                }
                /**
                * @brief Serialise function required for communications
                */
                template <class T>
                void Serialise(T& archive) 
                {  
                    archive.Serialise(RDRC_F_DEL_TRACKS, "RDRC_F_DEL_TRACKS");
                    archive.Serialise(RDRC_F_DEL_TRK_IDENT, "RDRC_F_DEL_TRK_IDENT");
                }

                LCA_TOPIC("TrackDeletionCommand", 1, 0);
            private:
                /**
                 * @brief This field is used to delete all tracks, all air tracks, all surface tracks or an individually identified track by its track identifier.
                 */
                RDRC_F_DEL_TRACKS_ENUM RDRC_F_DEL_TRACKS;
                /**
                 * @brief This field is the unique Nose Radar Track Identification Number as generated by the Nose Radar and part of the Track File.
                 */
                uint16_t RDRC_F_DEL_TRK_IDENT;
        };
    }
}

#endif